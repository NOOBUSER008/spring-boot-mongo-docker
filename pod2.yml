kind: ConfigMap
apiVersion: v1
metadata:
  name: springappconfigmap
data:
  username: springapp
  password: mongodb@123

---
apiVersion: v1
kind: Secret
metadata:
  name: springappsecrets
type: Opaque
stringData:   # We can define multiple key value pairs.
  password: devdb@123
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: efs-pv
spec:
  capacity:
    storage: 2Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  nfs:
    server: fs-080ad5a9f6cce5c10.efs.ap-south-1.amazonaws.com
    path: "/"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1.5Gi
  storageClassName: efs-sc

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    name: nginx
spec:
  replicas: 2
  selector:
    matchLabels:
      name: nginx
  template:
    metadata:
      labels:
        name: nginx
    spec:
      containers:
        - name: nginx-container
          image: noobuser008/java-mongo:latest
          ports:
          - containerPort: 8080
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 15
          volumeMounts:
            - name: efs-pvc
              mountPath: /mnt/efs
          env:
            - name: DEMO_GREETING
              valueFrom:
                configMapKeyRef:
                  name: springappconfigmap
                  key: username
            - name: MONGO_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: springappsecrets
                  key: password
            - name: MONGO_DB_HOSTNAME
              value: mongo
          resources:
            requests:
              cpu: "300m"
              memory: "1Gi"
            limits:
              cpu: "500m"
              memory: "1Gi"
      volumes:
        - name: efs-pvc
          persistentVolumeClaim:
            claimName: efs-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    name: nginx
  type: NodePort # Because nginx controller has load balancer then why we need of svc elb?

---
# Mongo db pod with volumes(HostPath)
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: mongodbrs
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
     metadata:
       name: mongodbpod
       labels:
         app: mongodb
     spec:
       volumes:
       - name: mongodb-pvc
         persistentVolumeClaim:
           claimName: efs-pvc
       containers:
       - name: mongodbcontainer
         image: mongo
         ports:
         - containerPort: 27017
         env:
         - name: MONGO_INITDB_ROOT_USERNAME
           value: your-root-username
         - name: MONGO_INITDB_ROOT_PASSWORD
           value: your-root-password
         volumeMounts:
         - name: mongodb-pvc
           mountPath: /data/db

---
apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: 27017
---

apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: hpadeploymentautoscaler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx
  minReplicas: 2
  maxReplicas: 5
  metrics:
    - resource:
        name: cpu
        targetAverageUtilization: 50
      type: Resource

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
spec:
  ingressClassName: nginx
  rules:
  - http:
        paths:
          - path: /save
            pathType: Prefix
            backend:
              service:
                name: nginx-service
                port:
                  number: 80
